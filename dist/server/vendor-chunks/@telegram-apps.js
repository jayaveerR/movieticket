"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@telegram-apps";
exports.ids = ["vendor-chunks/@telegram-apps"];
exports.modules = {

/***/ "(ssr)/./node_modules/@telegram-apps/bridge/dist/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/@telegram-apps/bridge/dist/index.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   $debug: () => (/* binding */ ae),\n/* harmony export */   $targetOrigin: () => (/* binding */ ue),\n/* harmony export */   CancelablePromise: () => (/* binding */ w),\n/* harmony export */   ERR_ABORTED: () => (/* binding */ re),\n/* harmony export */   ERR_CANCELED: () => (/* binding */ ne),\n/* harmony export */   ERR_CUSTOM_METHOD_ERR_RESPONSE: () => (/* binding */ Ke),\n/* harmony export */   ERR_METHOD_PARAMETER_UNSUPPORTED: () => (/* binding */ He),\n/* harmony export */   ERR_METHOD_UNSUPPORTED: () => (/* binding */ Je),\n/* harmony export */   ERR_RETRIEVE_LP_FAILED: () => (/* binding */ Be),\n/* harmony export */   ERR_TIMED_OUT: () => (/* binding */ oe),\n/* harmony export */   ERR_UNKNOWN_ENV: () => (/* binding */ Ge),\n/* harmony export */   EnhancedPromise: () => (/* binding */ S),\n/* harmony export */   TypedError: () => (/* binding */ b),\n/* harmony export */   addEventListener: () => (/* binding */ te),\n/* harmony export */   camelToKebab: () => (/* binding */ ct),\n/* harmony export */   camelToSnake: () => (/* binding */ it),\n/* harmony export */   captureSameReq: () => (/* binding */ et),\n/* harmony export */   compareVersions: () => (/* binding */ tt),\n/* harmony export */   createAbortError: () => (/* binding */ M),\n/* harmony export */   createCbCollector: () => (/* binding */ k),\n/* harmony export */   createLogger: () => (/* binding */ ke),\n/* harmony export */   createPostEvent: () => (/* binding */ dt),\n/* harmony export */   createTypedErrorPredicate: () => (/* binding */ L),\n/* harmony export */   defineEventHandlers: () => (/* binding */ bt),\n/* harmony export */   deleteCssVar: () => (/* binding */ ft),\n/* harmony export */   emitMiniAppsEvent: () => (/* binding */ x),\n/* harmony export */   getStorageValue: () => (/* binding */ xe),\n/* harmony export */   hasWebviewProxy: () => (/* binding */ Q),\n/* harmony export */   invokeCustomMethod: () => (/* binding */ Et),\n/* harmony export */   isAbortError: () => (/* binding */ ot),\n/* harmony export */   isCanceledError: () => (/* binding */ st),\n/* harmony export */   isIframe: () => (/* binding */ Ne),\n/* harmony export */   isTMA: () => (/* binding */ _t),\n/* harmony export */   isTimeoutError: () => (/* binding */ nt),\n/* harmony export */   mockTelegramEnv: () => (/* binding */ lt),\n/* harmony export */   off: () => (/* binding */ wt),\n/* harmony export */   on: () => (/* binding */ Fe),\n/* harmony export */   postEvent: () => (/* binding */ pe),\n/* harmony export */   removeEventHandlers: () => (/* binding */ gt),\n/* harmony export */   request: () => (/* binding */ fe),\n/* harmony export */   resetPackageState: () => (/* binding */ yt),\n/* harmony export */   retrieveLaunchParams: () => (/* binding */ Ye),\n/* harmony export */   setCssVar: () => (/* binding */ pt),\n/* harmony export */   setStorageValue: () => (/* binding */ We),\n/* harmony export */   sleep: () => (/* binding */ at),\n/* harmony export */   snakeToCamel: () => (/* binding */ ut),\n/* harmony export */   subscribe: () => (/* binding */ ht),\n/* harmony export */   supports: () => (/* binding */ H),\n/* harmony export */   unsubscribe: () => (/* binding */ mt)\n/* harmony export */ });\nclass d extends Error {\n  constructor(t, r, n) {\n    super(\n      typeof r == \"object\" ? r.message : r || t,\n      {\n        cause: typeof r == \"object\" ? r.cause : n\n      }\n    ), this.type = t, this.name = \"TypedError\", Object.setPrototypeOf(this, d.prototype);\n  }\n}\nfunction G(e) {\n  return e.replace(/[A-Z]/g, (t) => `_${t.toLowerCase()}`);\n}\nfunction we(e) {\n  return e.replace(/_[a-z]/g, (t) => t[1].toUpperCase());\n}\nconst he = \"ERR_INVALID_VALUE\", me = \"ERR_UNEXPECTED_VALUE\", de = \"ERR_UNEXPECTED_TYPE\", K = \"ERR_PARSE\";\nfunction V(e, t) {\n  const r = {};\n  for (const n in e) {\n    const o = e[n];\n    if (!o)\n      continue;\n    let s, a;\n    typeof o == \"function\" ? (s = n, a = o) : [s, a] = o;\n    try {\n      const c = a(t(s));\n      c !== void 0 && (r[n] = c);\n    } catch (c) {\n      throw new d(\n        K,\n        `Parser for \"${n}\" property failed${s === n ? \"\" : `. Source field: \"${s}\"`}`,\n        c\n      );\n    }\n  }\n  return r;\n}\nfunction Z(e) {\n  let t = e;\n  if (typeof t == \"string\")\n    try {\n      t = JSON.parse(t);\n    } catch (r) {\n      throw new d(he, { cause: r });\n    }\n  if (typeof t != \"object\" || !t || Array.isArray(t))\n    throw new d(me);\n  return t;\n}\nfunction g(e, t) {\n  return (r) => {\n    const n = (o) => {\n      if (!(r && o === void 0))\n        try {\n          return t(o);\n        } catch (s) {\n          throw new d(K, {\n            message: `\"${e}\" transformer failed to parse the value`,\n            cause: s\n          });\n        }\n    };\n    return /* @__PURE__ */ Object.assign(\n      n,\n      {\n        isValid(o) {\n          try {\n            return n(o), !0;\n          } catch {\n            return !1;\n          }\n        }\n      }\n    );\n  };\n}\nfunction l(e, t) {\n  return g(t || \"object\", (r) => {\n    const n = Z(r);\n    return V(e, (o) => n[o]);\n  });\n}\nfunction R(e) {\n  throw new d(de, `Unexpected value received: ${JSON.stringify(e)}`);\n}\nconst $ = g(\"boolean\", (e) => {\n  if (typeof e == \"boolean\")\n    return e;\n  const t = String(e);\n  if (t === \"1\" || t === \"true\")\n    return !0;\n  if (t === \"0\" || t === \"false\")\n    return !1;\n  R(e);\n}), _ = g(\"string\", (e) => {\n  if (typeof e == \"string\" || typeof e == \"number\")\n    return e.toString();\n  R(e);\n}), P = g(\"number\", (e) => {\n  if (typeof e == \"number\")\n    return e;\n  if (typeof e == \"string\") {\n    const t = Number(e);\n    if (!Number.isNaN(t))\n      return t;\n  }\n  R(e);\n}), Ee = g(\"date\", (e) => e instanceof Date ? e : new Date(P()(e) * 1e3));\nfunction z(e, t) {\n  return g(t || \"searchParams\", (r) => {\n    typeof r != \"string\" && !(r instanceof URLSearchParams) && R(r);\n    const n = typeof r == \"string\" ? new URLSearchParams(r) : r;\n    return V(e, (o) => {\n      const s = n.get(o);\n      return s === null ? void 0 : s;\n    });\n  });\n}\nfunction j(e) {\n  for (const t in e)\n    e[t] = [G(t), e[t]];\n  return e;\n}\nconst ye = (e) => {\n  const t = P(), r = P(!0), n = _(), o = _(!0), s = $(!0), a = l(j({\n    addedToAttachmentMenu: s,\n    allowsWriteToPm: s,\n    firstName: n,\n    id: t,\n    isBot: s,\n    isPremium: s,\n    languageCode: o,\n    lastName: o,\n    photoUrl: o,\n    username: o\n  }), \"User\")(!0);\n  return z(\n    j({\n      authDate: Ee(),\n      canSendAfter: r,\n      chat: l(\n        j({\n          id: t,\n          type: n,\n          title: n,\n          photoUrl: o,\n          username: o\n        }),\n        \"Chat\"\n      )(!0),\n      chatInstance: o,\n      chatType: o,\n      hash: n,\n      queryId: o,\n      receiver: a,\n      startParam: o,\n      signature: n,\n      user: a\n    }),\n    \"initData\"\n  )(e);\n};\nfunction ve(e) {\n  return /^#[\\da-f]{6}$/i.test(e);\n}\nfunction Pe(e) {\n  return /^#[\\da-f]{3}$/i.test(e);\n}\nfunction Re(e) {\n  const t = e.replace(/\\s/g, \"\").toLowerCase();\n  if (ve(t))\n    return t;\n  if (Pe(t)) {\n    let n = \"#\";\n    for (let o = 0; o < 3; o += 1)\n      n += t[1 + o].repeat(2);\n    return n;\n  }\n  const r = t.match(/^rgb\\((\\d{1,3}),(\\d{1,3}),(\\d{1,3})\\)$/) || t.match(/^rgba\\((\\d{1,3}),(\\d{1,3}),(\\d{1,3}),\\d{1,3}\\)$/);\n  if (!r)\n    throw new Error(`Value \"${e}\" does not satisfy any of known RGB formats.`);\n  return r.slice(1).reduce((n, o) => {\n    const s = parseInt(o, 10).toString(16);\n    return n + (s.length === 1 ? \"0\" : \"\") + s;\n  }, \"#\");\n}\nconst Te = g(\"rgb\", (e) => Re(_()(e))), I = g(\n  \"themeParams\",\n  (e) => {\n    const t = Te(!0);\n    return Object.entries(Z(e)).reduce((r, [n, o]) => (r[we(n)] = t(o), r), {});\n  }\n);\n// @__NO_SIDE_EFFECTS__\nfunction W(e) {\n  return JSON.stringify(\n    Object.fromEntries(\n      Object.entries(e).map(([t, r]) => [G(t), r])\n    )\n  );\n}\nconst Ae = (e) => {\n  const t = _(), r = _(!0), n = $(!0);\n  return z({\n    botInline: [\"tgWebAppBotInline\", n],\n    defaultColors: [\"tgWebAppDefaultColors\", I(!0)],\n    fullscreen: [\"tgWebAppFullscreen\", n],\n    initData: [\"tgWebAppData\", ye(!0)],\n    initDataRaw: [\"tgWebAppData\", r],\n    platform: [\"tgWebAppPlatform\", t],\n    showSettings: [\"tgWebAppShowSettings\", n],\n    startParam: [\"tgWebAppStartParam\", r],\n    themeParams: [\"tgWebAppThemeParams\", I()],\n    version: [\"tgWebAppVersion\", t]\n  }, \"launchParams\")(e);\n};\n// @__NO_SIDE_EFFECTS__\nfunction Se(e) {\n  const {\n    initDataRaw: t,\n    startParam: r,\n    showSettings: n,\n    botInline: o,\n    fullscreen: s,\n    defaultColors: a\n  } = e, c = new URLSearchParams();\n  return c.set(\"tgWebAppPlatform\", e.platform), c.set(\"tgWebAppThemeParams\", /* @__PURE__ */ W(e.themeParams)), c.set(\"tgWebAppVersion\", e.version), t && c.set(\"tgWebAppData\", t), r && c.set(\"tgWebAppStartParam\", r), typeof n == \"boolean\" && c.set(\"tgWebAppShowSettings\", n ? \"1\" : \"0\"), typeof o == \"boolean\" && c.set(\"tgWebAppBotInline\", o ? \"1\" : \"0\"), typeof s == \"boolean\" && c.set(\"tgWebAppFullscreen\", s ? \"1\" : \"0\"), a && c.set(\"tgWebAppDefaultColors\", /* @__PURE__ */ W(a)), c.toString();\n}\nconst X = l({\n  eventType: _(),\n  eventData: (e) => e\n}, \"miniAppsMessage\"), Y = g(\"fn\", (e) => {\n  if (typeof e == \"function\")\n    return e;\n  R(e);\n});\nfunction $e(e) {\n  return !!e && typeof e == \"object\" && !Array.isArray(e);\n}\nconst Ce = l({\n  TelegramWebviewProxy: l({ postEvent: Y() })()\n});\nfunction Q(e) {\n  return Ce().isValid(e);\n}\nfunction Ne() {\n  try {\n    return window.self !== window.top;\n  } catch {\n    return !0;\n  }\n}\nvar De = Object.defineProperty, je = (e, t, r) => t in e ? De(e, t, { enumerable: !0, configurable: !0, writable: !0, value: r }) : e[t] = r, ee = (e, t, r) => je(e, typeof t != \"symbol\" ? t + \"\" : t, r);\nclass b extends Error {\n  constructor(t, r, n) {\n    super(\n      typeof r == \"object\" ? r.message : r || t,\n      {\n        cause: typeof r == \"object\" ? r.cause : n\n      }\n    ), this.type = t, this.name = \"TypedError\", Object.setPrototypeOf(this, b.prototype);\n  }\n}\nfunction te(e, t, r) {\n  return e.addEventListener(t, r), () => e.removeEventListener(t, r);\n}\nfunction k(...e) {\n  const t = e.flat(1);\n  return [\n    t.push.bind(t),\n    () => {\n      t.forEach((r) => {\n        r();\n      });\n    }\n  ];\n}\nfunction Ue(e, t) {\n  return e instanceof b && e.type === t;\n}\nfunction L(e) {\n  return (t) => Ue(t, e);\n}\nconst re = \"ERR_ABORTED\", ne = \"ERR_CANCELED\", oe = \"ERR_TIMED_OUT\";\nfunction M(e) {\n  return new b(re, { cause: e });\n}\nconst nt = L(oe), ot = L(re), st = L(ne);\nfunction F(e, t) {\n  return e.reject = t.reject, e;\n}\nclass w extends Promise {\n  constructor(t, r) {\n    let n, o;\n    typeof t == \"function\" ? (n = t, o = r) : o = t;\n    let s, a;\n    super((c, i) => {\n      o || (o = {});\n      const { abortSignal: u } = o;\n      if (u && u.aborted)\n        return i(M(u.reason));\n      const [f, h] = k(), m = (E) => (...ge) => (h(), E(...ge)), T = new AbortController(), { signal: A } = T;\n      a = m((E) => {\n        T.abort(E), i(E);\n      }), s = m(c), u && f(\n        te(u, \"abort\", () => {\n          a(M(u.reason));\n        })\n      );\n      const { timeout: D } = o;\n      if (D) {\n        const E = setTimeout(() => {\n          a(new b(oe, `Timeout reached: ${D}ms`));\n        }, D);\n        f(() => {\n          clearTimeout(E);\n        });\n      }\n      n && n(s, a, A);\n    }), ee(this, \"reject\"), this.reject = a;\n  }\n  /**\n   * Creates a new BetterPromise instance using executor, resolving promise when a result\n   * was returned.\n   * @param fn - function returning promise result.\n   * @param options - additional options.\n   */\n  static withFn(t, r) {\n    return new w((n, o, s) => {\n      try {\n        const a = t(s);\n        return a instanceof Promise ? a.then(n, o) : n(a);\n      } catch (a) {\n        o(a);\n      }\n    }, r);\n  }\n  /**\n   * @see Promise.resolve\n   */\n  static resolve(t) {\n    return new w((r) => {\n      r(t);\n    });\n  }\n  /**\n   * @see Promise.reject\n   */\n  static reject(t) {\n    return new w((r, n) => {\n      n(t);\n    });\n  }\n  /**\n   * Cancels the promise execution.\n   */\n  cancel() {\n    this.reject(new b(ne));\n  }\n  /**\n   * @see Promise.catch\n   */\n  catch(t) {\n    return this.then(void 0, t);\n  }\n  /**\n   * @see Promise.finally\n   */\n  finally(t) {\n    return F(super.finally(t), this);\n  }\n  /**\n   * @see Promise.then\n   */\n  then(t, r) {\n    return F(super.then(t, r), this);\n  }\n}\nfunction J(e, t) {\n  return e.resolve = t.resolve, e;\n}\nclass S extends w {\n  constructor(t, r) {\n    let n, o;\n    typeof t == \"function\" ? (n = t, o = r) : o = t;\n    let s;\n    super((a, c, i) => {\n      s = a, n && n(a, c, i);\n    }, o), ee(this, \"resolve\"), this.resolve = s;\n  }\n  /**\n   * Creates a new EnhancedPromise instance using executor, resolving promise when a result\n   * was returned.\n   * @param fn - function returning promise result.\n   * @param options - additional options.\n   */\n  static withFn(t, r) {\n    return new S(\n      (n, o, s) => w.withFn(t, { abortSignal: s }).then(n, o),\n      r\n    );\n  }\n  /**\n   * @see Promise.resolve\n   */\n  static resolve(t) {\n    return new S((r) => {\n      r(t);\n    });\n  }\n  /**\n   * @see Promise.reject\n   */\n  static reject(t) {\n    return new S((r, n) => {\n      n(t);\n    });\n  }\n  /**\n   * @see Promise.catch\n   */\n  catch(t) {\n    return this.then(void 0, t);\n  }\n  /**\n   * @see Promise.finally\n   */\n  finally(t) {\n    return J(super.finally(t), this);\n  }\n  /**\n   * @see Promise.then\n   */\n  then(t, r) {\n    return J(super.then(t, r), this);\n  }\n}\nfunction at(e, t) {\n  return new w((r) => {\n    setTimeout(r, e);\n  }, { abortSignal: t });\n}\nfunction se(e) {\n  return `tapps/${e}`;\n}\nfunction We(e, t) {\n  sessionStorage.setItem(se(e), JSON.stringify(t));\n}\nfunction xe(e) {\n  const t = sessionStorage.getItem(se(e));\n  try {\n    return t ? JSON.parse(t) : void 0;\n  } catch {\n  }\n}\nfunction ct(e) {\n  return e.replace(/[A-Z]/g, (t) => `-${t.toLowerCase()}`);\n}\nfunction it(e) {\n  return e.replace(/[A-Z]/g, (t) => `_${t.toLowerCase()}`);\n}\nfunction ut(e) {\n  return e.replace(/_[a-z]/g, (t) => t[1].toUpperCase());\n}\n// @__NO_SIDE_EFFECTS__\nfunction ke(e, t) {\n  t || (t = {});\n  const {\n    textColor: r,\n    bgColor: n,\n    shouldLog: o = !0\n  } = t;\n  function s(a, ...c) {\n    if (!o || typeof o == \"function\" && !o())\n      return;\n    const i = \"font-weight:bold;padding:0 5px;border-radius:5px\";\n    console[a](\n      `%c${Intl.DateTimeFormat(\"en-GB\", {\n        hour: \"2-digit\",\n        minute: \"2-digit\",\n        second: \"2-digit\",\n        fractionalSecondDigits: 3,\n        timeZone: \"UTC\"\n      }).format(/* @__PURE__ */ new Date())}%c / %c${e}`,\n      `${i};background-color: lightblue;color:black`,\n      \"\",\n      `${i};${r ? `color:${r};` : \"\"}${n ? `background-color:${n}` : \"\"}`,\n      ...c\n    );\n  }\n  return [\n    function(...a) {\n      s(\"log\", ...a);\n    },\n    function(...a) {\n      s(\"error\", ...a);\n    }\n  ];\n}\nfunction pt(e, t) {\n  document.documentElement.style.setProperty(e, t);\n}\nfunction ft(e) {\n  document.documentElement.style.removeProperty(e);\n}\nfunction Le(e, t) {\n  t();\n}\n// @__NO_SIDE_EFFECTS__\nfunction y(e, t) {\n  t || (t = {});\n  const r = t.equals || Object.is;\n  let n = [], o = e;\n  const s = (u) => {\n    if (!r(o, u)) {\n      const f = o;\n      o = u, Le(i, () => {\n        [...n].forEach(([h, m]) => {\n          h(u, f), m && c(h, !0);\n        });\n      });\n    }\n  };\n  function a(u) {\n    const f = typeof u != \"object\" ? { once: u } : u;\n    return {\n      once: f.once || !1,\n      signal: f.signal || !1\n    };\n  }\n  const c = (u, f) => {\n    const h = a(f), m = n.findIndex(([T, A]) => T === u && A.once === h.once && A.signal === h.signal);\n    m >= 0 && n.splice(m, 1);\n  }, i = Object.assign(\n    function() {\n      return Oe(i), o;\n    },\n    {\n      destroy() {\n        n = [];\n      },\n      set: s,\n      reset() {\n        s(e);\n      },\n      sub(u, f) {\n        return n.push([u, a(f)]), () => c(u, f);\n      },\n      unsub: c,\n      unsubAll() {\n        n = n.filter((u) => u[1].signal);\n      }\n    }\n  );\n  return i;\n}\nconst U = [];\nfunction Oe(e) {\n  U.length && U[U.length - 1].add(e);\n}\nconst ae = /* @__PURE__ */ y(!1), [O, qe] = /* @__PURE__ */ ke(\"Bridge\", {\n  bgColor: \"#9147ff\",\n  textColor: \"white\",\n  shouldLog: ae\n}), Ie = {\n  clipboard_text_received: l({\n    req_id: _(),\n    data: (e) => e === null ? e : _(!0)(e)\n  }, \"clipboard_text_received\"),\n  custom_method_invoked: l({\n    req_id: _(),\n    result: (e) => e,\n    error: _(!0)\n  }, \"custom_method_invoked\"),\n  popup_closed: g(\"popup_closed\", (e) => e ? l({\n    button_id: (t) => t == null ? void 0 : _()(t)\n  })()(e) : {}),\n  viewport_changed: l({\n    height: P(),\n    width: (e) => e == null ? window.innerWidth : P()(e),\n    is_state_stable: $(),\n    is_expanded: $()\n  }, \"viewport_changed\")\n};\nfunction Me(e) {\n  const t = window, [, r] = k(\n    // Add listener, which handles events sent from the Telegram web application and also events\n    // generated by the local emitEvent function.\n    te(t, \"message\", (n) => {\n      if (n.source !== t.parent)\n        return;\n      let o;\n      try {\n        o = X()(n.data);\n      } catch {\n        return;\n      }\n      const { eventType: s, eventData: a } = o, c = Ie[s];\n      try {\n        const i = c ? c()(a) : a;\n        O(\"Event received:\", i ? { eventType: s, eventData: i } : { eventType: s }), e([s, i]);\n      } catch (i) {\n        qe(\n          [\n            `An error occurred processing the \"${s}\" event from the Telegram application.`,\n            \"Please, file an issue here:\",\n            \"https://github.com/Telegram-Mini-Apps/telegram-apps/issues/new/choose\"\n          ].join(`\n`),\n          o,\n          i\n        );\n      }\n    })\n  );\n  return r;\n}\nconst C = /* @__PURE__ */ y(), N = /* @__PURE__ */ y();\nfunction ce() {\n  return N() || N.set(Me(C.set)), C;\n}\nconst v = /* @__PURE__ */ y({});\nfunction ie(e) {\n  let t = v()[e];\n  return t || (t = /* @__PURE__ */ y(void 0, {\n    equals() {\n      return !1;\n    }\n  }), ce().sub((r) => {\n    r && r[0] === e && t.set(r[1]);\n  }), v.set({ ...v(), [e]: t })), t;\n}\nfunction Fe(e, t, r) {\n  return ie(e).sub(t, r);\n}\nconst Je = \"ERR_METHOD_UNSUPPORTED\", Be = \"ERR_RETRIEVE_LP_FAILED\", He = \"ERR_METHOD_PARAMETER_UNSUPPORTED\", Ge = \"ERR_UNKNOWN_ENV\", Ke = \"ERR_INVOKE_CUSTOM_METHOD_RESPONSE\", ue = /* @__PURE__ */ y(\"https://web.telegram.org\");\nfunction pe(e, t) {\n  O(\"Posting event:\", t ? { eventType: e, eventData: t } : { eventType: e });\n  const r = window;\n  if (Q(r)) {\n    r.TelegramWebviewProxy.postEvent(e, JSON.stringify(t));\n    return;\n  }\n  const n = JSON.stringify({ eventType: e, eventData: t });\n  if (Ne())\n    return r.parent.postMessage(n, ue());\n  const { external: o } = r;\n  if (l({ notify: Y() })().isValid(o)) {\n    o.notify(n);\n    return;\n  }\n  throw new b(Ge);\n}\nfunction fe(e, t, r) {\n  r || (r = {});\n  const { capture: n } = r, [o, s] = k();\n  return new w((a) => {\n    (Array.isArray(t) ? t : [t]).forEach((c) => {\n      o(\n        Fe(c, (i) => {\n          (!n || (Array.isArray(t) ? n({\n            event: c,\n            payload: i\n          }) : n(i))) && a(i);\n        })\n      );\n    }), (r.postEvent || pe)(e, r.params);\n  }, r).finally(s);\n}\nfunction q(e) {\n  return Ae()(e);\n}\nfunction _e(e) {\n  return q(\n    e.replace(/^[^?#]*[?#]/, \"\").replace(/[?#]/g, \"&\")\n  );\n}\nfunction Ve() {\n  return _e(window.location.href);\n}\nfunction Ze() {\n  const e = performance.getEntriesByType(\"navigation\")[0];\n  if (!e)\n    throw new Error(\"Unable to get first navigation entry.\");\n  return _e(e.name);\n}\nconst ze = \"launchParams\";\nfunction Xe() {\n  return q(xe(ze) || \"\");\n}\nfunction le(e) {\n  We(\"launchParams\", /* @__PURE__ */ Se(e));\n}\nfunction be(e) {\n  return e instanceof Error ? e.message + (e.cause ? `\n  ${be(e.cause)}` : \"\") : JSON.stringify(e);\n}\nfunction Ye() {\n  const e = [];\n  for (const t of [\n    // Try to retrieve launch parameters from the current location. This method can return\n    // nothing in case, location was changed, and then the page was reloaded.\n    Ve,\n    // Then, try using the lower level API - window.performance.\n    Ze,\n    // Finally, try to extract launch parameters from the session storage.\n    Xe\n  ])\n    try {\n      const r = t();\n      return le(r), r;\n    } catch (r) {\n      e.push(r);\n    }\n  throw new b(Be, [\n    \"Unable to retrieve launch parameters from any known source. Perhaps, you have opened your app outside Telegram?\",\n    \"📖 Refer to docs for more information:\",\n    \"https://docs.telegram-mini-apps.com/packages/telegram-apps-bridge/environment\",\n    \"Collected errors:\",\n    ...e.map((t) => `— ${be(t)}`)\n  ].join(`\n`));\n}\nfunction _t(e) {\n  if (e === \"simple\")\n    try {\n      return Ye(), !0;\n    } catch {\n      return !1;\n    }\n  return w.withFn(async () => {\n    if (Q(window))\n      return !0;\n    try {\n      return await fe(\"web_app_request_theme\", \"theme_changed\", { timeout: 100 }), !0;\n    } catch {\n      return !1;\n    }\n  }, e);\n}\nfunction x(e, t) {\n  window.dispatchEvent(new MessageEvent(\"message\", {\n    data: JSON.stringify({ eventType: e, eventData: t }),\n    // We specify window.parent to imitate the case, the parent iframe sent us this event.\n    source: window.parent\n  }));\n}\nfunction Qe(e, t) {\n  if (typeof t == \"string\")\n    try {\n      const { eventType: r } = X()(t);\n      r === \"web_app_request_theme\" && x(\"theme_changed\", {\n        theme_params: JSON.parse(/* @__PURE__ */ W(e))\n      }), r === \"web_app_request_viewport\" && x(\"viewport_changed\", {\n        width: window.innerWidth,\n        height: window.innerHeight,\n        is_state_stable: !0,\n        is_expanded: !0\n      });\n    } catch {\n    }\n}\nfunction lt(e) {\n  var n;\n  const t = typeof e == \"string\" ? q(e) : e;\n  le(t);\n  const r = (n = window.TelegramWebviewProxy) == null ? void 0 : n.postEvent;\n  window.TelegramWebviewProxy = {\n    postEvent(o, s) {\n      Qe(t.themeParams, JSON.stringify({ eventType: o, eventData: s })), r == null || r(o, s);\n    }\n  }, O(\"Environment was mocked by the mockTelegramEnv function\");\n}\nfunction bt() {\n  [\n    [\"TelegramGameProxy_receiveEvent\"],\n    // Windows Phone.\n    [\"TelegramGameProxy\", \"receiveEvent\"],\n    // Desktop.\n    [\"Telegram\", \"WebView\", \"receiveEvent\"]\n    // Android and iOS.\n  ].forEach((e) => {\n    let t = window;\n    e.forEach((r, n, o) => {\n      if (n === o.length - 1) {\n        t[r] = x;\n        return;\n      }\n      r in t || (t[r] = {}), t = t[r];\n    });\n  });\n}\nfunction gt() {\n  [\"TelegramGameProxy_receiveEvent\", \"TelegramGameProxy\", \"Telegram\"].forEach((e) => {\n    delete window[e];\n  });\n}\nfunction wt(e, t, r) {\n  ie(e).unsub(t, r);\n}\nfunction ht(e, t) {\n  return ce().sub(e, t);\n}\nfunction mt(e, t) {\n  C.unsub(e, t);\n}\nfunction et(e) {\n  return ({ req_id: t }) => t === e;\n}\nfunction B(e) {\n  return e.split(\".\").map(Number);\n}\nfunction tt(e, t) {\n  const r = B(e), n = B(t), o = Math.max(r.length, n.length);\n  for (let s = 0; s < o; s += 1) {\n    const a = r[s] || 0, c = n[s] || 0;\n    if (a !== c)\n      return a > c ? 1 : -1;\n  }\n  return 0;\n}\nfunction p(e, t) {\n  return tt(e, t) <= 0;\n}\nfunction H(e, t, r) {\n  if (typeof r == \"string\") {\n    if (e === \"web_app_open_link\") {\n      if (t === \"try_instant_view\")\n        return p(\"6.4\", r);\n      if (t === \"try_browser\")\n        return p(\"7.6\", r);\n    }\n    if (e === \"web_app_set_header_color\" && t === \"color\")\n      return p(\"6.9\", r);\n    if (e === \"web_app_close\" && t === \"return_back\")\n      return p(\"7.6\", r);\n    if (e === \"web_app_setup_main_button\" && t === \"has_shine_effect\")\n      return p(\"7.10\", r);\n  }\n  switch (e) {\n    case \"web_app_open_tg_link\":\n    case \"web_app_open_invoice\":\n    case \"web_app_setup_back_button\":\n    case \"web_app_set_background_color\":\n    case \"web_app_set_header_color\":\n    case \"web_app_trigger_haptic_feedback\":\n      return p(\"6.1\", t);\n    case \"web_app_open_popup\":\n      return p(\"6.2\", t);\n    case \"web_app_close_scan_qr_popup\":\n    case \"web_app_open_scan_qr_popup\":\n    case \"web_app_read_text_from_clipboard\":\n      return p(\"6.4\", t);\n    case \"web_app_switch_inline_query\":\n      return p(\"6.7\", t);\n    case \"web_app_invoke_custom_method\":\n    case \"web_app_request_write_access\":\n    case \"web_app_request_phone\":\n      return p(\"6.9\", t);\n    case \"web_app_setup_settings_button\":\n      return p(\"6.10\", t);\n    case \"web_app_biometry_get_info\":\n    case \"web_app_biometry_open_settings\":\n    case \"web_app_biometry_request_access\":\n    case \"web_app_biometry_request_auth\":\n    case \"web_app_biometry_update_token\":\n      return p(\"7.2\", t);\n    case \"web_app_setup_swipe_behavior\":\n      return p(\"7.7\", t);\n    case \"web_app_share_to_story\":\n      return p(\"7.8\", t);\n    case \"web_app_setup_secondary_button\":\n    case \"web_app_set_bottom_bar_color\":\n      return p(\"7.10\", t);\n    case \"web_app_request_safe_area\":\n    case \"web_app_request_content_safe_area\":\n    case \"web_app_request_fullscreen\":\n    case \"web_app_exit_fullscreen\":\n    case \"web_app_set_emoji_status\":\n    case \"web_app_add_to_home_screen\":\n    case \"web_app_check_home_screen\":\n    case \"web_app_request_emoji_status_access\":\n      return p(\"8.0\", t);\n    default:\n      return [\n        \"iframe_ready\",\n        \"iframe_will_reload\",\n        \"web_app_close\",\n        \"web_app_data_send\",\n        \"web_app_expand\",\n        \"web_app_open_link\",\n        \"web_app_ready\",\n        \"web_app_request_theme\",\n        \"web_app_request_viewport\",\n        \"web_app_setup_main_button\",\n        \"web_app_setup_closing_behavior\"\n      ].includes(e);\n  }\n}\nfunction dt(e, t) {\n  t || (t = \"strict\");\n  const r = typeof t == \"function\" ? t : (n) => {\n    const { method: o, version: s } = n;\n    let a, c;\n    if (\"param\" in n ? (a = `Parameter \"${n.param}\" of \"${o}\" method is unsupported in Mini Apps version ${s}`, c = He) : (a = `Method \"${o}\" is unsupported in Mini Apps version ${s}`, c = Je), t === \"strict\")\n      throw new b(c, a);\n    return console.warn(a);\n  };\n  return (n, o) => H(n, e) ? $e(o) && n === \"web_app_set_header_color\" && \"color\" in o && !H(n, \"color\", e) ? r({ version: e, method: n, param: \"color\" }) : pe(n, o) : r({ version: e, method: n });\n}\nfunction Et(e, t, r, n) {\n  return fe(\"web_app_invoke_custom_method\", \"custom_method_invoked\", {\n    ...n || {},\n    params: { method: e, params: t, req_id: r },\n    capture: et(r)\n  }).then(({ result: o, error: s }) => {\n    if (s)\n      throw new b(Ke, s);\n    return o;\n  });\n}\nfunction rt(e) {\n  e.unsubAll(), e.reset();\n}\nfunction yt() {\n  var e;\n  (e = N()) == null || e(), [\n    ...Object.values(v()),\n    v,\n    C,\n    N,\n    ue,\n    ae\n  ].forEach(rt);\n}\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@telegram-apps/bridge/dist/index.js\n");

/***/ })

};
;